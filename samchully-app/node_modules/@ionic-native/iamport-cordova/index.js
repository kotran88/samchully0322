var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IamportCordovaOriginal = /** @class */ (function (_super) {
    __extends(IamportCordovaOriginal, _super);
    function IamportCordovaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IamportCordovaOriginal.prototype.payment = function (paymentObject) { return cordova(this, "payment", {}, arguments); };
    IamportCordovaOriginal.prototype.certification = function (certificationObject) { return cordova(this, "certification", {}, arguments); };
    IamportCordovaOriginal.pluginName = "IamportCordova";
    IamportCordovaOriginal.plugin = "iamport-cordova";
    IamportCordovaOriginal.pluginRef = "cordova.plugins.IamportCordova";
    IamportCordovaOriginal.repo = "https://github.com/iamport/iamport-cordova";
    IamportCordovaOriginal.platforms = ["ios", "android"];
    return IamportCordovaOriginal;
}(IonicNativePlugin));
var IamportCordova = new IamportCordovaOriginal();
export { IamportCordova };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2lhbXBvcnQtY29yZG92YS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEwRnBDLGtDQUFpQjs7OztJQU9uRCxnQ0FBTyxhQUFDLGFBQTRCO0lBVXBDLHNDQUFhLGFBQUMsbUJBQXdDOzs7Ozs7eUJBNUd4RDtFQTJGb0MsaUJBQWlCO1NBQXhDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZGVjbGFyZSBjb25zdCBjb3Jkb3ZhOiBDb3Jkb3ZhICYgeyBwbHVnaW5zOiBhbnkgfTtcblxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50T2JqZWN0IHtcbiAgdGl0bGU/OiBUaXRsZURhdGE7IC8vIHdlYnZpZXcgdGl0bGUgZGF0YVxuICB1c2VyQ29kZTogc3RyaW5nOyAvLyB1c2VyIGlkZW50aWZpY2F0aW9uIGNvZGVcbiAgZGF0YTogUGF5bWVudERhdGE7IC8vIHBheW1lbnQgZGF0YVxuICBjYWxsYmFjazogYW55OyAvLyBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBwYXltZW50XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2VydGlmaWNhdGlvbk9iamVjdCB7XG4gIHRpdGxlPzogVGl0bGVEYXRhOyAvLyB3ZWJ2aWV3IHRpdGxlIGRhdGFcbiAgdXNlckNvZGU6IHN0cmluZzsgLy8gdXNlciBpZGVudGlmaWNhdGlvbiBjb2RlXG4gIGRhdGE6IENlcnRpZmljYXRpb25EYXRhOyAvLyBjZXJ0aWZpY2F0aW9uIGRhdGFcbiAgY2FsbGJhY2s6IGFueTsgLy8gY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgY2VydGlmaWNhdGlvblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlRGF0YSB7XG4gIG5hbWU/OiBzdHJpbmc7IC8vIHdlYnZpZXcgdGl0bGUgbmFtZVxuICBjb2xvcj86IHN0cmluZzsgLy8gd2VidmlldyB0aXRsZSBiYWNrZ3JvdW5kIGNvbG9yXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudERhdGEge1xuICBwZz86IHN0cmluZzsgLy8gcGF5bWVudCBnYXRld2F5IHR5cGVcbiAgcGF5X21ldGhvZD86IHN0cmluZzsgLy8gcGF5bWVudCBtZXRob2RcbiAgbmFtZTogc3RyaW5nOyAvLyBuYW1lIG9mIG9yZGVyXG4gIG1lcmNoYW50X3VpZD86IHN0cmluZzsgLy8gdW5pcXVlIG1lcmNoYW50IGlkXG4gIGFtb3VudDogc3RyaW5nOyAvLyBwYXltZW50IGFtb3VudFxuICBidXllcl9uYW1lPzogc3RyaW5nOyAvLyBidXllciBuYW1lXG4gIGJ1eWVyX3RlbD86IHN0cmluZzsgLy8gYnV5ZXIgY29udGFjdFxuICBidXllcl9lbWFpbD86IHN0cmluZzsgLy8gYnV5ZXIgZW1haWwgYWRkcmVzc1xuICBidXllcl9hZGRyPzogc3RyaW5nOyAvLyBidXllciBhZGRyZXNzXG4gIGJ1eWVyX3Bvc3Rjb2RlPzogc3RyaW5nOyAvLyBidXllciBwb3N0Y29kZVxuICBhcHBfc2NoZW1lOiBzdHJpbmc7IC8vIGN1c3RvbSBhcHAgdXJsIHNjaGVtZVxuICBjdXN0b21fZGF0YT86IGFueTsgLy8gY3VzdG9tIGRhdGFcbiAgbm90aWNlX3VybD86IHN0cmluZzsgLy8gbm90aWZpY2F0aW9uIHVybFxuICBlc2Nyb3c/OiBib29sZWFuOyAvLyB3aGV0aGVyIHRoZSB0eXBlIG9mIHRoaXMgb3JkZXIgaXMgZXNjcm93XG4gIGRpZ2l0YWw/OiBib29sZWFuOyAvLyB3aGV0aGVyIHRoaXMgb3JkZXIgaXMgZm9yIHJlYWwgcHJvZHVjdHMgb3IgY29udGVudHNcbiAgZGlzcGxheT86IHtcbiAgICBjYXJkX3F1b3RhPzogbnVtYmVyW107IC8vIGNyZWRpdCBjYXJkIGluc3RhbGxtZW50IHNldHRpbmcgdmFsdWVcbiAgfTtcbiAgY3VycmVuY3k/OiBzdHJpbmc7IC8vIHBheW1lbnQgY3VycmVuY3lcbiAgY3VzdG9tZXJfdWlkPzogc3RyaW5nOyAvLyB1bmlxdWUgY3VzdG9tZXIgaWQgZm9yIHN1YnNjcmlwdGlvbiBwYXltZW50c1xuICB0YXhfZnJlZT86IHN0cmluZzsgLy8gdGF4IGFtb3VudFxuICBsYW5ndWFnZT86IHN0cmluZzsgLy8gbGFuZ3VhZ2UgdHlwZVxuICB2YmFua19kdWU/OiBzdHJpbmc7IC8vIHZiYW5rIGR1ZSBkYXRlXG4gIGJpel9udW0/OiBzdHJpbmc7IC8vIGJ1c2luZXNzIG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENlcnRpZmljYXRpb25EYXRhIHtcbiAgY29tcGFueT86IHN0cmluZzsgLy8gY29tcGFueSBuYW1lXG4gIHBob25lPzogc3RyaW5nOyAvLyBjZWxsIHBob25lIG51bWJlclxuICBuYW1lPzogc3RyaW5nOyAvLyBuYW1lXG4gIGNhcnJpZXI/OiBzdHJpbmc7IC8vIGNhcnJpZXIgY29kZVxuICBiaXJ0aD86IHN0cmluZzsgLy8gYmlydGggZGF0ZVxuICBtZXJjaGFudF91aWQ/OiBzdHJpbmc7IC8vIHVuaXF1ZSBtZXJjaGFudCBpZFxuICBtaW5fYWdlPzogc3RyaW5nOyAvLyBtaW5pbXVtIGFnZSB0byBhbGxvdyBjZXJ0aWZpY2F0aW9uXG4gIHBvcHVwPzogYm9vbGVhbjsgLy8gd2hldGhlciB0aGUgd2VidmlldyBpcyBwb3B1cFxufVxuXG4vKipcbiAqIEBuYW1lIElhbXBvcnQgQ29yZG92YVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBkb2VzIHNvbWV0aGluZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSWFtcG9ydENvcmRvdmEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2lhbXBvcnQtY29yZG92YS9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGlhbXBvcnRDb3Jkb3ZhOiBJYW1wb3J0Q29yZG92YSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuaWFtcG9ydENvcmRvdmEuZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJYW1wb3J0Q29yZG92YScsXG4gIHBsdWdpbjogJ2lhbXBvcnQtY29yZG92YScsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaWFtcG9ydC9pYW1wb3J0LWNvcmRvdmEnLFxuICBwbGF0Zm9ybXM6IFsnaW9zJywgJ2FuZHJvaWQnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSWFtcG9ydENvcmRvdmEgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHRvIGxvYWQgYSB3ZWJ2aWV3IG9mIGEgcGF5bWVudCBnYXRld2F5IHRvIHBheSBmb3Igc29tZXRoaW5nXG4gICAqIEBwYXJhbSBwYXltZW50T2JqZWN0IHtQYXltZW50T2JqZWN0fSBQYXltZW50IGRhdGEgdG8gc2V0IHRoZSBwYXltZW50IHdlYnZpZXdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBBIGNhbGxiYWNrIGZ1bmN0aW9uIG9mIHRoZSBwYXltZW50IGRhdGEgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHdlYnZpZXcgaXMgY2xvc2VkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHBheW1lbnQocGF5bWVudE9iamVjdDogUGF5bWVudE9iamVjdCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5wYXltZW50KHBheW1lbnRPYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdG8gbG9hZCBhIHdlYnZpZXcgZm9yIGlkZW50aWZpY2F0aW9uIHdpdGggY2FycmllciB0eXBlKGxpa2UgVmVyaXpvbiksIG5hbWUgYW5kIHBob25lIG51bWJlclxuICAgKiBAcGFyYW0gY2VydGlmaWNhdGlvbk9iamVjdCB7Q2VydGlmaWNhdGlvbk9iamVjdH0gQ2VydGlmaWNhdGlvbiBkYXRhIHRvIHNldCB0aGUgY2VydGlmaWNhdGlvbiB3ZWJ2aWV3XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gQSBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgY2VydGlmaWNhdGlvbiBkYXRhIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB3ZWJ2aWV3IGlzIGNsb3NlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3Q6IENlcnRpZmljYXRpb25PYmplY3QpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBjb3Jkb3ZhLnBsdWdpbnMuSWFtcG9ydENvcmRvdmEuY2VydGlmaWNhdGlvbihjZXJ0aWZpY2F0aW9uT2JqZWN0KTtcbiAgfVxufVxuIl19